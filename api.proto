syntax = "proto3";

package api;

option go_package = "api";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service UserDB {
    //Ping - input: empty, output: returns ok if server is healthy.
    rpc Ping(PingRequest) returns(PingResponse){};
    rpc Login(LoginRequest) returns(LoginResponse){};
    rpc LoginJWT(LoginJWTRequest) returns(LoginJWTResponse){};
    //Get - input: an array of user emails, output: returns an array of current user details
    rpc Get(GetRequest) returns(GetResponse){};
    //GetRegex - input: a regex string, output: returns an array of current user details with emails that match the regex pattern
    rpc GetRegex(GetRegexRequest) returns(GetRegexResponse){};
    //GetEmails -  input: none, output: returns all emails in database
    rpc GetEmails(GetEmailsRequest) returns(GetEmailsResponse){};
    //GetRegexEmails -  input: a regex string, output: returns all emails in database that match the regex pattern
    rpc GetRegexEmails(GetRegexEmailsRequest) returns(GetRegexEmailsResponse){};
    //Delete -  input: an array of user email strings to delete, output: none
    rpc Delete(DeleteRequest) returns(DeleteResponse){};


    rpc AddPlan(SetPlanRequest) returns(SetPlanResponse){};
    rpc SetSource(SetSourceRequest) returns(SetSourceResponse){};
    rpc IncUsage(IncUsageRequest) returns(IncUsageResponse){};
    rpc Charge(ChargeRequest) returns(ChargeResponse){};
    rpc UpdateCharge(UpdateChargeRequest) returns(UpdateChargeResponse){};
    rpc RefundCharge(RefundChargeRequest) returns(RefundChargeResponse){};
}

message PingRequest {}

message PingResponse {
    bool ok =1;
}

message Subscription {
    string sub_id = 1;
    repeated string sub_items =2;
    map<string, string> sub_metadata =3; //optional metadata associated with the user
    string plan_id =4;
    int64 plan_amount =5;
    map<string, string> plan_metadata =6; //optional metadata associated with the user
}

//User is an enhanced view of an User containing a human readable address and the users latest tracking information
message User {
    string email = 1 [(validator.field) = {regex: "^.{1,225}$"}];
    string name = 2 [(validator.field) = {regex: "^.{1,225}$"}];
    map<string, string> metadata =3; //optional metadata associated with the user
    string customer_id =4;
    bool has_source =5;
    Subscription subscription =6;
    int64 updated_unix =7; //unix timestamp representing last update (optional)
}

message LoginRequest {
   string code =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message LoginResponse {
    User user =1;
    string jwt =2;
}

message LoginJWTRequest {
    string jwt =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message LoginJWTResponse {
    User user =1;
}

message SetRequest {
    User user= 1;
}

message SetResponse {
    User user= 1;
}

message GetEmailsRequest {}

message GetEmailsResponse {
    repeated string emails =1;
}

message GetRegexEmailsRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexEmailsResponse {
    repeated string emails =1;
}

message GetRequest {
    repeated string emails =1;
}

message GetResponse {
    map<string, User> users= 1;
}

message GetRegexRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexResponse {
    map<string, User> users= 1;
}

message DeleteRequest {
    repeated string emails =1;
}

message DeleteResponse {}


message NewRequest {
    string name =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string admin_email =2 [(validator.field) = {regex: "^.{1,225}$"}];
    map<string, string> metadata =3; //optional metadata associated with the user
}

message SetPlanRequest {
    string email =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string plan =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message SetPlanResponse {
     User user =1;
}


message SetSourceRequest {
    string email =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string source =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message SetSourceResponse {
    User user =1;
}

message IncUsageRequest {
    string email =1 [(validator.field) = {regex: "^.{1,225}$"}];
    int64 amount =2;
    bool increment =3;
    string sub_item =4 [(validator.field) = {regex: "^.{1,225}$"}];
}

message IncUsageResponse {}

message ChargeRequest {
    string email =1 [(validator.field) = {regex: "^.{1,225}$"}];
    int64 amount =2 [(validator.field) = {int_gt : 0}];
    string description =3;
    map<string, string>  metadata =4;
}

message ChargeResponse {
    string charge_id =1;
}

message UpdateChargeRequest {
    string chargeID =1 [(validator.field) = {regex: "^.{1,225}$"}];
    int64 amount =2 [(validator.field) = {int_gt : 0}];
    string description =3;
    map<string, string>  metadata =4;
}

message UpdateChargeResponse {
    string charge_id =1;
}

message RefundChargeRequest {
    string chargeID =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message RefundChargeResponse {
    bool refunded =1;
}